// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/receiver/reciever.proto

package receiverpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReceiverService_SendLocation_FullMethodName    = "/location.ReceiverService/SendLocation"
	ReceiverService_StreamLocations_FullMethodName = "/location.ReceiverService/StreamLocations"
)

// ReceiverServiceClient is the client API for ReceiverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReceiverServiceClient interface {
	SendLocation(ctx context.Context, in *OBUData, opts ...grpc.CallOption) (*ReceiverResponse, error)
	StreamLocations(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[OBUData, ReceiverResponse], error)
}

type receiverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReceiverServiceClient(cc grpc.ClientConnInterface) ReceiverServiceClient {
	return &receiverServiceClient{cc}
}

func (c *receiverServiceClient) SendLocation(ctx context.Context, in *OBUData, opts ...grpc.CallOption) (*ReceiverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReceiverResponse)
	err := c.cc.Invoke(ctx, ReceiverService_SendLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiverServiceClient) StreamLocations(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[OBUData, ReceiverResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ReceiverService_ServiceDesc.Streams[0], ReceiverService_StreamLocations_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[OBUData, ReceiverResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReceiverService_StreamLocationsClient = grpc.ClientStreamingClient[OBUData, ReceiverResponse]

// ReceiverServiceServer is the server API for ReceiverService service.
// All implementations must embed UnimplementedReceiverServiceServer
// for forward compatibility.
type ReceiverServiceServer interface {
	SendLocation(context.Context, *OBUData) (*ReceiverResponse, error)
	StreamLocations(grpc.ClientStreamingServer[OBUData, ReceiverResponse]) error
	mustEmbedUnimplementedReceiverServiceServer()
}

// UnimplementedReceiverServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReceiverServiceServer struct{}

func (UnimplementedReceiverServiceServer) SendLocation(context.Context, *OBUData) (*ReceiverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendLocation not implemented")
}
func (UnimplementedReceiverServiceServer) StreamLocations(grpc.ClientStreamingServer[OBUData, ReceiverResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamLocations not implemented")
}
func (UnimplementedReceiverServiceServer) mustEmbedUnimplementedReceiverServiceServer() {}
func (UnimplementedReceiverServiceServer) testEmbeddedByValue()                         {}

// UnsafeReceiverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReceiverServiceServer will
// result in compilation errors.
type UnsafeReceiverServiceServer interface {
	mustEmbedUnimplementedReceiverServiceServer()
}

func RegisterReceiverServiceServer(s grpc.ServiceRegistrar, srv ReceiverServiceServer) {
	// If the following call pancis, it indicates UnimplementedReceiverServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReceiverService_ServiceDesc, srv)
}

func _ReceiverService_SendLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OBUData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServiceServer).SendLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiverService_SendLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServiceServer).SendLocation(ctx, req.(*OBUData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiverService_StreamLocations_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReceiverServiceServer).StreamLocations(&grpc.GenericServerStream[OBUData, ReceiverResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReceiverService_StreamLocationsServer = grpc.ClientStreamingServer[OBUData, ReceiverResponse]

// ReceiverService_ServiceDesc is the grpc.ServiceDesc for ReceiverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReceiverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "location.ReceiverService",
	HandlerType: (*ReceiverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendLocation",
			Handler:    _ReceiverService_SendLocation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamLocations",
			Handler:       _ReceiverService_StreamLocations_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/receiver/reciever.proto",
}
